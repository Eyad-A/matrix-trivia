{"version":3,"sources":["API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/movies2-bg.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","getQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","MEDIUM","newQuestions","length","undefined","e","currentTarget","prev","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d87b69c5.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const getQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=11&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px, 5px, 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1.1rem;\r\n  }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    font-size: 0.9rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n    correct\r\n      ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n      : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`","import React from \"react\";\r\nimport {AnswerObject} from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNumber,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNumber} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {answers.map(answer => (\r\n        <ButtonWrapper \r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer} \r\n        >\r\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n          </button>\r\n        </ButtonWrapper> \r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","export default __webpack_public_path__ + \"static/media/movies2-bg.7d5c0ec2.jpg\";","import styled, {createGlobalStyle} from \"styled-components\";\r\nimport BGImage from './images/movies2-bg.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Roboto', sans-serif;\r\n  }\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    background-color: rgba(0,0,0,0.50);    \r\n    padding: 0px 30px;\r\n  }\r\n\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 5px;\r\n    background-color: rgba(0,0,0,0.50);    \r\n    padding: 0px 30px;\r\n  }\r\n\r\n  h1 {\r\n    background-color: rgba(0,0,0,0.50);    \r\n    padding: 0px 30px;\r\n    font-size: 70px;\r\n    font-family: 'Catamaran', sans-serif;\r\n    font-weight: 700;\r\n    color: #fff;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n\r\n`","import React, { useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport { getQuizQuestions } from './API';\nimport { QuestionState, Difficulty } from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n\n\n  async function startQuiz() {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await getQuizQuestions(TOTAL_QUESTIONS, Difficulty.MEDIUM);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore(prev => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Movie Trivia </h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startQuiz}>\n            Start quiz\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading. Please wait...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper> \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}